#coding: utf-8
class UserController < ApplicationController
  before_filter :check_of_existence_administrator
  before_filter :authorize
  def ddddd
    @user = User.find(session[:user_id])
    if request.post?
      if params[:commit] == "Изменить"
        render("user")
      elsif params[:commit] = "Сохранить"
        if @user.update_attributes(:last_name => params[:last_name],
                                   :first_name => params[:first_name],
                                   :middle_name => params[:middle_name],
                                   :sex_id => params[:sex],
                                   :chair_id => params[:chair],
                                   :military_rank_id => params[:military_rank],
                                   :scientific_rank_id => params[:scientific_rank],
                                   :scientific_degree_id => params[:scientific_degree],
                                   :post_id => params[:post],
                                   :phone => params[:phone],
                                   :room => params[:room])
          redirect_to :controller => 'user', :action => 'home'
        else
          @user.errors[:last_name].each do |error|
            flash[:last_name] = error;
          end
          @user.errors[:first_name].each do |error|
            flash[:first_name] = error;
          end
          @user.errors[:middle_name].each do |error|
            flash[:middle_name] = error;
          end
          @user.errors[:phone].each do |error|
            flash[:phone] = error;
          end
          @user.errors[:room].each do |error|
            flash[:room] = error;
          end
          render("user");
        end
      end
    end
  end

  def home
    @date = Time.now
    @pairs = Pair.where(:teacher_id => session[:user_id], :date_time => @date..(@date + 1.day))
    @tasks = Task.where(:user_id => session[:user_id], :date_time => @date..(@date + 1.day))

  end

  def calendar
    @cases = Array.new
    if params[:teacher_id] && params[:teacher_id] != session[:user_id]
      @pairs = Pair.where(:user_id => params[:teacher_id])
    else
      @pairs = Pair.where(:user_id => session[:user_id])
      @tasks = Task.where(:user_id => session[:user_id])
      for task in @tasks do
        _case = Case.new(:title => task.title, :date_time => task.date_time, :task_id => task.id, :note => "\r" + task.title + "\r\n" + task.note + "\r\n" + task.date_time.strftime("%H:%M"))
        @cases << _case
      end
    end
    for pair in @pairs do
      _case = Case.new(:title => pair.subject.name, :date_time => pair.date_time, :pair_id => pair.id, :note => "\r" + pair.subject.name + "\r\n" + pair.pair_type + "\r\n" + pair.list_groups + "\r\n" + pair.place + "\r\n" + pair.date_time.strftime("%H:%M"))
      @cases << _case
    end




    @date = params[:month] ? Date.strptime(params[:month],"%Y-%m") : Date.today

    @cases = @cases.sort {|a, b| a.date_time <=> b.date_time}
  end

  def my_subjects
    @subjects = User.find(session[:user_id]).pairs.collect {|pair| pair.subject}
    @subjects = @subjects.uniq
  end

  def journal
    @students = Group.find(params[:group_id]).students
    @pairs = Pair.where(:group_id => params[:group_id], :subject_id => params[:subject_id])
  end
end
